/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Front;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author USER
 */
public class BancoCliente extends javax.swing.JFrame {

    //Host del servidor
    final String HOST;
    //Puerto del servidor
    final int PUERTO;
    BufferedReader in;
    PrintWriter out;
    String cedulaUsuario;

    public BancoCliente() {
        initComponents();
        PUERTO = 17288;
        HOST = "4.tcp.ngrok.io";
        //HOST = "6.tcp.us-cal-1.ngrok.io";
        cedulaUsuario = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_cc = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        txt_password = new javax.swing.JPasswordField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jButton1.setText("Crear Cuenta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 102, 102));
        jButton2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jButton2.setText("Modificar Cuenta");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 102, 102));
        jButton3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jButton3.setText("Cerrar Cuenta");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 102, 102));
        jButton4.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jButton4.setText("Realizar Deposito");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 102, 102));
        jButton5.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jButton5.setText("Realizar Transferencia");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 102, 102));
        jButton6.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jButton6.setText("Retirar Dinero");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel1.setText("Cedula:");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel2.setText("Clave:");

        txt_cc.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        jButton7.setBackground(new java.awt.Color(0, 153, 153));
        jButton7.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jButton7.setText("Ingresar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        txt_password.setText("jPasswordField1");

        jMenu1.setText("Ver");

        jMenu3.setText("Usuarios");

        jMenuItem2.setText("Detalles");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenu1.add(jMenu3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_cc, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .addComponent(txt_password))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txt_cc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*
         nombre,  apellido,  cedula,  clave,  deposito
         */

        try {
            //Creo el socket para conectarme con el cliente
            Socket sc = new Socket(HOST, PUERTO);

            in = new BufferedReader(new InputStreamReader(sc.getInputStream()));
            out = new PrintWriter(sc.getOutputStream(), true);
            String request = "1&";
            request = request + cifrarTexto((JOptionPane.showInputDialog("Ingrese el nombre del cliente")),4) + "&";
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese el apellido del cliente"),4) + "&");
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese la cedula del cliente"), 4) + "&");
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese la clave del cliente"), 4) + "&");
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese el deposito inicial del cliente"), 4) + "&");
            //Envio un mensaje al cliente
            out.println(request);
            System.out.println(request);
            
            //Recibo el mensaje del servidor
            String resp = in.readLine();
            JOptionPane.showMessageDialog(null, resp);
            
            sc.close();

        } catch (IOException ex) {
            Logger.getLogger(BancoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        /*
        
         clave,  numeroCuenta,  cambio,  nuevoValor
        
         */
        try {
            //Creo el socket para conectarme con el cliente
            Socket sc = new Socket(HOST, PUERTO);

            in = new BufferedReader(new InputStreamReader(sc.getInputStream()));
            out = new PrintWriter(sc.getOutputStream(), true);
            String request = "2&";
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese la clave"), 4)) + "&";
            request = request + cifrarTexto(cedulaUsuario, 4) + "&";

            request = request
                    + ( cifrarTexto(""+(JOptionPane.showInputDialog(null, "Seleccione una opcion", "Opciones de Modificación", JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Nombre", "Apellido"}, "Nombre")),4)
                    + "&");

            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese el nuevo valor"), 4) + "&");

            //Envio un mensaje al cliente
            out.println(request);
            System.out.println(request);

            //Recibo el mensaje del servidor
            String resp = in.readLine();
            JOptionPane.showMessageDialog(null, "Respuesta: " + resp);

            sc.close();

        } catch (IOException ex) {
            Logger.getLogger(BancoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        /*
            int cuenta, String motivo, int clave
         */
        try {
            //Creo el socket para conectarme con el cliente
            Socket sc = new Socket(HOST, PUERTO);

            in = new BufferedReader(new InputStreamReader(sc.getInputStream()));
            out = new PrintWriter(sc.getOutputStream(), true);
            String request = "3&";
            request = request + cifrarTexto((JOptionPane.showInputDialog("Ingrese el numero de cuenta")),4) + "&";
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese el motivo del cierre de cuenta"), 4) + "&");
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese la clave del cliente"),4) + "&");
            //Envio un mensaje al cliente
            out.println(request);
            System.out.println(request);

            //Recibo el mensaje del servidor
            String resp = in.readLine();
            JOptionPane.showMessageDialog(null, "Respuesta: " + resp);

            sc.close();

        } catch (IOException ex) {
            Logger.getLogger(BancoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        /*
            int cuenta, String cedula, double deposito
         */
        try {
            //Creo el socket para conectarme con el cliente
            Socket sc = new Socket(HOST, PUERTO);

            in = new BufferedReader(new InputStreamReader(sc.getInputStream()));
            out = new PrintWriter(sc.getOutputStream(), true);
            String request = "4&";
            request = request + cifrarTexto(JOptionPane.showInputDialog("Ingrese el numero de la cuenta"),4) + "&";
            request = request + cifrarTexto(JOptionPane.showInputDialog("Ingrese la cedula del \npropietario de la cuenta"), 4) + "&";
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese el monto a depositar"), 4) + "&");
            //Envio un mensaje al cliente
            out.println(request);
            System.out.println(request);

            //Recibo el mensaje del servidor
            String resp = in.readLine();
            if (resp.equals("-1.0")) {
                JOptionPane.showMessageDialog(null, "Error:\n numero de cuenta incorrecto");
            } else if (resp.equals("-2.0")) {

                JOptionPane.showMessageDialog(null, "Respuesta:\n cedula no coincide");
            } else {
                JOptionPane.showMessageDialog(null, "Respuesta: \n" + resp);

            }
            sc.close();

        } catch (IOException ex) {
            Logger.getLogger(BancoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        /*
         int cuentaDestino, double transferencia, int cuentaOrigen, int clave
         */

        try {
            //Creo el socket para conectarme con el cliente
            Socket sc = new Socket(HOST, PUERTO);

            in = new BufferedReader(new InputStreamReader(sc.getInputStream()));
            out = new PrintWriter(sc.getOutputStream(), true);
            String request = "5&";
            request = request + cifrarTexto(JOptionPane.showInputDialog("Ingrese el numero de cuenta de destino"),4) + "&";
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese el monto de transferencia"),4) + "&");
            request = request + cifrarTexto(JOptionPane.showInputDialog("Ingrese el numero de cuenta de origen"),4) + "&";
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese la clave"),4) + "&");

            //Envio un mensaje al cliente
            out.println(request);
            System.out.println(request);

            //Recibo el mensaje del servidor
            String resp = in.readLine();
            if (resp.equals("-1.0")) {
                JOptionPane.showMessageDialog(null, "Respuesta: \n no se ha podido encontrar el numero de cuenta");
            } else if (resp.equals("-2.0")) {
                JOptionPane.showMessageDialog(null, "Respuesta:\n clave incorrecta");
            } else if (resp.equals("-3.0")) {
                JOptionPane.showMessageDialog(null, "Respuesta: \n no tiene fondos suficientes");
            } else {
                JOptionPane.showMessageDialog(null, "Respuesta: \n" + resp);
            }
            sc.close();

        } catch (IOException ex) {
            Logger.getLogger(BancoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        /*
         int cuenta, String cedula, double retiro, int clave
         */
        try {
            //Creo el socket para conectarme con el cliente
            Socket sc = new Socket(HOST, PUERTO);

            in = new BufferedReader(new InputStreamReader(sc.getInputStream()));
            out = new PrintWriter(sc.getOutputStream(), true);
            String request = "6&";
            request = request + cifrarTexto(JOptionPane.showInputDialog("Ingrese el numero de cuenta"),4) + "&";
            request = request + cifrarTexto(cedulaUsuario,4) + "&";
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese el monto de retiro"),4) + "&");
            request = request + (cifrarTexto(JOptionPane.showInputDialog("Ingrese la clave"),4) + "&");
            //Envio un mensaje al cliente
            out.println(request);
            System.out.println(request);

            //Recibo el mensaje del servidor
            String resp = in.readLine();
            if (resp.equals("-1.0")) {
                JOptionPane.showMessageDialog(null, "Respuesta: \n no se ha podido encontrar el numero de cuenta");
            } else if (resp.equals("-2.0")) {
                JOptionPane.showMessageDialog(null, "Respuesta:\n clave incorrecta");
            } else if (resp.equals("-3.0")) {
                JOptionPane.showMessageDialog(null, "Respuesta: \n no tiene fondos suficientes");
            } else {
                JOptionPane.showMessageDialog(null, "Respuesta: \n" + resp);
            }
            sc.close();

        } catch (IOException ex) {
            Logger.getLogger(BancoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        /*
           cedula,  clave
         */

        if (txt_password.getText().toString().equals("") || txt_cc.getText().toString().equals("")) {
            System.out.println("Debe llenar ambos campos");
        } else {
            String request = "0&";
            request = request + (cifrarTexto(txt_cc.getText().toString(), 4) + "&");
            request = request + (cifrarTexto(txt_password.getText().toString(), 4) + "&");
            try {
                //Creo el socket para conectarme con el cliente
                Socket sc = new Socket(HOST, PUERTO);

                in = new BufferedReader(new InputStreamReader(sc.getInputStream()));
                out = new PrintWriter(sc.getOutputStream(), true);
                //Envio un mensaje al cliente
                out.println(request);
            System.out.println(request);

                //Recibo el mensaje del servidor
                String respuesta = in.readLine();
                System.out.println("Respuesta: " + respuesta);
                if (respuesta.equals("200")) {
                    JOptionPane.showMessageDialog(null, "Ingreso Exitoso");
                    controlBotones(true);
                    cedulaUsuario = txt_cc.getText().toString();
                    txt_cc.setEnabled(false);
                    txt_password.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(null, "Los datos no son correcto");
                }

                sc.close();

            } catch (IOException ex) {
                Logger.getLogger(BancoCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        String request = "7&";
        try {
            //Creo el socket para conectarme con el cliente
            Socket sc = new Socket(HOST, PUERTO);

            in = new BufferedReader(new InputStreamReader(sc.getInputStream()));
            out = new PrintWriter(sc.getOutputStream(), true);
            //Envio un mensaje al cliente
            out.println(request);
            System.out.println(request);

            //Recibo el mensaje del servidor
            String respuesta = in.readLine();
            System.out.println("\n Respuesta: " + respuesta);
            String mostrarUsuarios = "";
            String[] usuarios = respuesta.split("%");
            for (String usuarioObjeto : usuarios) {
                String[] usuario = usuarioObjeto.split("&");
                mostrarUsuarios = mostrarUsuarios + "Nombre: " + usuario[0] + " " + usuario[1] + "\n"
                        + "Cedula: " + usuario[2] + "\n"
                        + "Cuentas: \n"
                        + "       #" + usuario[3] + " -> $" + usuario[4] + "\n ------------------------ \n";
            }
            System.out.println(mostrarUsuarios);

            sc.close();

        } catch (IOException ex) {
            Logger.getLogger(BancoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BancoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BancoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BancoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BancoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BancoCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JTextField txt_cc;
    private javax.swing.JPasswordField txt_password;
    // End of variables declaration//GEN-END:variables
    private void controlBotones(boolean logueado) {
        jButton2.setEnabled(logueado);
        jButton3.setEnabled(logueado);
        jButton4.setEnabled(logueado);
        jButton5.setEnabled(logueado);
        jButton6.setEnabled(logueado);
    }
    public String cifrarTexto(String texto, int clave) {
        Map<Character, Character> tablaCifrado = crearTablaCifrado(clave);
        StringBuilder textoCifrado = new StringBuilder();

        for (char caracter : texto.toCharArray()) {
            // Verificar si el carácter está en la tabla de cifrado
            if (tablaCifrado.containsKey(caracter)) {
                textoCifrado.append(tablaCifrado.get(caracter));
            } else {
                // Si el carácter no está en la tabla, mantenerlo sin cambios
                textoCifrado.append(caracter);
            }
        }

        return textoCifrado.toString();
    }

    private Map<Character, Character> crearTablaCifrado(int clave) {
        Map<Character, Character> tablaCifrado = new HashMap<>();
        String caracteresPermitidos = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 áéíóúÁÉÍÓÚ";

        // Asegurarse de que la clave esté en el rango adecuado
        clave = clave % caracteresPermitidos.length();

        // Crear la tabla de cifrado con desplazamiento según la clave
        for (int i = 0; i < caracteresPermitidos.length(); i++) {
            char caracterOriginal = caracteresPermitidos.charAt(i);
            int indiceCifrado = (i + clave + caracteresPermitidos.length()) % caracteresPermitidos.length();
            char caracterCifrado = caracteresPermitidos.charAt(indiceCifrado);
            tablaCifrado.put(caracterOriginal, caracterCifrado);
        }

        return tablaCifrado;
    }
}


